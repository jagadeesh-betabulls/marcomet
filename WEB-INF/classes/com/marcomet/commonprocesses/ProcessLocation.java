/**********************************************************************Description:	This class will be the simple interface for other classes to 				insert/update locations	**********************************************************************/package com.marcomet.commonprocesses;import com.marcomet.jdbc.DBConnect;import java.sql.*;public class ProcessLocation{		//varables:  update the clear as you update this list	private int id=0;	private int cLid=0;	private int companyId;	private int contactId;	private int locationTypeId;	private String address1;	private String address2;	private String city;	private int stateId;	private String zipcode;	private int countryId;	private String fax="";	private String compFax="";	private String compPhone="";	private String notes="";		public final void setId(int temp){		id = temp;	}	public final void setId(String temp){		setId(Integer.parseInt(temp));	}	public final int getId(){		return id;	}		public final void setCLId(int temp){		cLid = temp;	}	public final void setCLId(String temp){		setCLId(Integer.parseInt(temp));	}	public final int getCLId(){		return cLid;	}		public final void setCompanyId(int temp){		companyId = temp;	}	public final void setCompanyId(String temp){		setCompanyId(Integer.parseInt(temp));	}	public final int getCompanyId(){		return companyId;	}			public final void setContactId(int temp){		contactId = temp;	}	public final void setContactId(String temp){		setContactId(Integer.parseInt(temp));	}	public final int getContactId(){		return contactId;	}	public final void setLocationTypeId(int temp){		locationTypeId = temp;	}	public final void setLocationTypeId(String temp){		setLocationTypeId(Integer.parseInt(temp));	}	public final int getLocationTypeId(){		return locationTypeId;	}		public final void setAddress1(String temp){		address1 = temp;	}	public final String getAddress1(){		return address1;	}		public final void setAddress2(String temp){		address2 = temp;	}	public final String getAddress2(){		return address2;	}		public final void setCity(String temp){		city = temp;	}	public final String getCity(){		return city;	}		public final void setStateId(int temp){		stateId = temp;	}	public final void setStateId(String temp){		setStateId(Integer.parseInt(temp));	}	public final int getStateId(){		return stateId;	}	public final void setZipcode(String temp){		zipcode = temp;	}	public final String getZipcode(){		return zipcode;	}	public final void setCountryId(int temp){		countryId = temp;	}	public final void setCountryId(String temp){		setCountryId(Integer.parseInt(temp));	}	public final int getCountryId(){		return countryId;	}			public final void setFax(String temp){		fax = temp;	}	public final String getFax(){		return fax;	}		public final void setCompFax(String temp){		compFax = temp;	}	public final String getCompFax(){		return compFax;	}		public final void setCompPhone(String temp){		compPhone = temp;	}	public final String getCompPhone(){		return compPhone;	}			public final void setNotes(String temp){		notes = temp;	}	public final String getNotes(){		return notes;	}	public final void processCL() throws SQLException{		Statement qs = null;		Statement qs1 = null;		Connection conn = null; 		String getCL = "";		String getL = "";		String here = "";		try {						conn = DBConnect.getConnection();			qs = conn.createStatement();			qs1 = conn.createStatement();			if (getLocationTypeId()==2){				getCL = "SELECT id from company_locations where company_id="+getCompanyId()+" and lu_location_type_id=2";				ResultSet rs1 = qs.executeQuery(getCL);				if (rs1.next()){ 					setCLId(rs1.getInt("id"));					processUpdateCL();					getL = "SELECT id from locations where companyid="+getCompanyId()+" and locationtypeid=2";					ResultSet rsL = qs1.executeQuery(getL);					while (rsL.next()){; 						processUpdate(rsL.getInt(1));					}				}else{					processInsertCL();				}			}		} catch ( Exception x) {			throw new SQLException(here+"|companyid:"+getCompanyId()+"|loctype:"+getLocationTypeId()+"|addr1:"+getAddress1()+"|addr2:"+getAddress2()+"|city:"+getCity()+"|st:"+getStateId()+"|zip:"+getZipcode()+"|country:"+getCountryId()+"|fx:"+getFax()+"|:notes"+getNotes()+x.getMessage());						}	}			public final int processInsertCL() throws SQLException{				String insertCLSQL = "INSERT INTO company_locations(company_id,lu_location_type_id,address1,address2,city,state,zip,country_id,fax,notes) VALUES (?,?,?,?,?,?,?,?,?,?)";		Connection conn = null; 		try {						conn = DBConnect.getConnection();			PreparedStatement insertCL=conn.prepareStatement(insertCLSQL);				insertCL.clearParameters();			insertCL.setInt(1,getCompanyId());			insertCL.setInt(2,getLocationTypeId());			insertCL.setString(3,getAddress1());			insertCL.setString(4,getAddress2());			insertCL.setString(5,getCity());			insertCL.setInt(6,getStateId());			insertCL.setString(7,getZipcode());			insertCL.setInt(8,getCountryId());			insertCL.setString(9,getCompFax());			insertCL.setString(10,getNotes());			insertCL.execute();					} catch (Exception x) {			x.printStackTrace();			throw new SQLException(x.getMessage());		} finally {			try { conn.close(); } catch ( Exception x) { conn = null; }		}		return getCLId();	}			public final void processUpdateCL() throws SQLException{		Connection conn = null; 		try {						conn = DBConnect.getConnection();				String sqlCL="UPDATE company_locations SET address1=?,address2=?,city=?,state=?,zip=?,country_id=?,fax=?,notes=? WHERE id= ?";			PreparedStatement updateCL = conn.prepareStatement(sqlCL);						updateCL.clearParameters();			updateCL.setString(1,getAddress1());			updateCL.setString(2,getAddress2());			updateCL.setString(3,getCity());			updateCL.setInt(4,getStateId());			updateCL.setString(5,getZipcode());			updateCL.setInt(6,getCountryId());			updateCL.setString(7,getFax());			updateCL.setString(8,getNotes());			updateCL.setInt(9,getCLId());			updateCL.execute();			//also need to update all billing records for other contacts with this id.												} catch (Exception x) {			throw new SQLException(x.getMessage());		} finally {						try { conn.close(); } catch ( Exception x) { conn = null; }		}	}			//if no connection is sent		public final int insert()	throws SQLException{						return processInsert();					}			//share connection from calling object		public final int insert(Connection tempConn) throws SQLException, Exception{		//conn = tempConn;		int i = processInsert();		//conn = null;		return i;			}			public final int processInsert() throws SQLException{				String insertSQL = "INSERT INTO locations(id,companyid,contactid,locationtypeid,address1,address2,city,state,zip, country_id) VALUES (?,?,?,?,?,?,?,?,?,?)";		Statement qs = null;		Connection conn = null; 		try {						conn = DBConnect.getConnection();			qs = conn.createStatement();			//lock table			qs.execute("LOCK TABLES locations WRITE");									//set id if it is 0/null			if(getId() <= 0){				String getNextIdSQL = "SELECT IF( MAX(id) IS NULL, 0, MAX(id))+1 FROM locations;";				ResultSet rs1 = qs.executeQuery(getNextIdSQL);				rs1.next(); 				setId(rs1.getInt(1));			}				PreparedStatement insert = conn.prepareStatement(insertSQL);			insert.clearParameters();			insert.setInt(1,getId());			insert.setInt(2,getCompanyId());			insert.setInt(3,getContactId());			insert.setInt(4,getLocationTypeId());			insert.setString(5,getAddress1());			insert.setString(6,getAddress2());			insert.setString(7,getCity());			insert.setInt(8,getStateId());			insert.setString(9,getZipcode());			insert.setInt(10,getCountryId());			insert.execute();				} catch (Exception x) {			throw new SQLException(x.getMessage());		} finally {			try { qs.execute("UNLOCK TABLES"); } catch ( Exception x) { qs = null; }			try { conn.close(); } catch ( Exception x) { conn = null; }		}		return getId();	}				//if no connection is sent		public final void update()	throws SQLException{					processUpdate();			}		//share connection from calling object		public final void update(Connection tempConn) throws SQLException, Exception{		//conn = tempConn;		processUpdate();		//conn = null;		return;			}			public final void processUpdate() throws SQLException{		Connection conn = null; 		try {						conn = DBConnect.getConnection();				String sql = "UPDATE locations SET address1 = ?,address2 = ?,city = ?,state = ?,zip = ?, country_id = ? WHERE contactid = ? AND locationtypeid = ? AND companyid = ?";			PreparedStatement update = conn.prepareStatement(sql);					update.clearParameters();			update.setString(1,getAddress1());			update.setString(2,getAddress2());			update.setString(3,getCity());			update.setInt(4,getStateId());			update.setString(5,getZipcode());			update.setInt(6,getCountryId());			update.setInt(7,getContactId());			update.setInt(8,getLocationTypeId());			update.setInt(9,getCompanyId());			update.execute();		} catch (Exception x) {			throw new SQLException(x.getMessage());		} finally {						try { conn.close(); } catch ( Exception x) { conn = null; }		}	}	public final void processUpdate(int lID) throws SQLException{		Connection conn = null; 		try {						conn = DBConnect.getConnection();				String sql = "UPDATE locations SET address1 = ?,address2 = ?,city = ?,state = ?,zip = ?, country_id = ? WHERE id=?";			PreparedStatement update = conn.prepareStatement(sql);					update.clearParameters();			update.setString(1,getAddress1());			update.setString(2,getAddress2());			update.setString(3,getCity());			update.setInt(4,getStateId());			update.setString(5,getZipcode());			update.setInt(6,getCountryId());			update.setInt(7,lID);			update.execute();		} catch (Exception x) {			throw new SQLException(x.getMessage());		} finally {						try { conn.close(); } catch ( Exception x) { conn = null; }		}	}	public final void clear(){		id = 0;		companyId = 0;		contactId = 0;		locationTypeId = 0;		address1 = "";		address2 = "";		city = "";		stateId = 0;		zipcode = "";				}		public final void delete(int id, int companyId)throws SQLException{		Statement qs = null;		Connection conn = null; 		try {						conn = DBConnect.getConnection();			qs = conn.createStatement();			setId(id);				setCompanyId(companyId);					String sql = "DELETE FROM locations WHERE contactid = " + getId() + " AND companyid = " + getCompanyId(); 			qs.execute(sql);			} catch (Exception x) {			throw new SQLException(x.getMessage());		} finally {			try { qs.close(); } catch ( Exception x) { qs = null; }			try { conn.close(); } catch ( Exception x) { conn = null; }		}	}		protected void finalize() {			}}